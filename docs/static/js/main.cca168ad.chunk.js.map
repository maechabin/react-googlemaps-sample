{"version":3,"sources":["maps.ts","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Maps","points","title","position","lat","lng","line","mapDiv","_this","this","mapOptions","center","google","maps","LatLng","zoom","mapTypeId","MapTypeId","ROADMAP","bounds","LatLngBounds","map","Map","forEach","point","marker","Marker","draggable","opacity","extend","getPosition","infoWindow","InfoWindow","content","addListener","open","event","Object","objectSpread","latLng","initPolyLine","fitBounds","setMap","lineSymbol","path","SymbolPath","CIRCLE","scale","strokeColor","Polyline","concat","icons","icon","offset","animateCircle","count","window","setInterval","get","set","App","gmapsRef","React","initMap","current","Fragment","react","ref","style","width","height","bottom","zIndex","textAlign","fontWeight","fontSize","href","target","rel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","src_App","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cca168ad.chunk.js","sourcesContent":["import { Point, LineSymbol } from './googlemaps.model';\n\nclass Maps {\n  /** Markerを表示する拠点リスト */\n  points: Point[] = [\n    { title: 'maker1', position: { lat: -25.363, lng: 131.044 } },\n    { title: 'maker2', position: { lat: -32.397, lng: 20.044 } },\n    { title: 'maker3', position: { lat: 34.397, lng: 25.044 } },\n    { title: 'maker4', position: { lat: 48.397, lng: 90.044 } },\n    { title: 'maker5', position: { lat: 29.32, lng: 135.9 } },\n  ];\n\n  /** ポリライン */\n  line: google.maps.Polyline | null = null;\n\n  public initMap(mapDiv: HTMLDivElement | null): void {\n    /**\n     * 地図を表示する際のオプション（初期表示）\n     * Mapsのオプション一覧\n     * https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\n     */\n    const mapOptions: google.maps.MapOptions = {\n      center: new google.maps.LatLng(-34.397, 150.644),\n      zoom: 8,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n    };\n\n    /** 範囲（境界）のインスタンスを作成するクラス */\n    const bounds = new google.maps.LatLngBounds();\n\n    /** Mapオブジェクトに地図表示要素情報とオプション情報を渡し、インスタンス生成 */\n    const map = new google.maps.Map(mapDiv, mapOptions); // <= refで取得した要素\n\n    /** Markerを表示 */\n    this.points.forEach(\n      (point: Point): void => {\n        /**\n         * Markerを設定\n         * \bMarkerオプション\n         * https://developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n         */\n        const marker = new google.maps.Marker({\n          map,\n          draggable: true, // ドラッグできるか\n          opacity: 0.7, // 透明度\n          position: point.position,\n          title: point.title,\n        });\n\n        /** 位置情報を範囲に追加 */\n        bounds.extend(marker.getPosition());\n\n        /** 吹き出しを設定 */\n        const infoWindow = new google.maps.InfoWindow({\n          content: point.title,\n        });\n\n        /** クリック時の処理（吹き出し表示） */\n        marker.addListener('click', () => {\n          infoWindow.open(map, marker);\n        });\n\n        /** マーカードラッグ時の処理（ポリラインのアップデート） */\n        marker.addListener('dragend', (event: google.maps.MouseEvent) => {\n          const title = point.title;\n          this.points = this.points.map((point: Point) => {\n            if (point.title === title) {\n              return {\n                ...point,\n                position: {\n                  lat: event.latLng.lat(),\n                  lng: event.latLng.lng(),\n                },\n              };\n            }\n            return point;\n          });\n\n          this.initPolyLine(map);\n        });\n      },\n    );\n\n    /** すべてのMarkerを地図に収める */\n    map.fitBounds(bounds);\n\n    /** ポリラインを表示する */\n    this.initPolyLine(map);\n  }\n\n  public initPolyLine(map: google.maps.Map): void {\n    /**\n     * 既存のポリラインを削除\n     * https://developers.google.com/maps/documentation/javascript/examples/polyline-remove\n     * */\n    if (this.line !== null) {\n      this.line.setMap(null);\n    }\n\n    /**\n     * polyline上を動くシンボル\n     * https://developers.google.com/maps/documentation/javascript/symbols#animate\n     * */\n    const lineSymbol: LineSymbol = {\n      path: google.maps.SymbolPath.CIRCLE,\n      scale: 8,\n      strokeColor: '#113345',\n    };\n\n    /** polylineを表示 */\n    this.line = new google.maps.Polyline({\n      path: this.points\n        .map((point: Point) => {\n          return point.position;\n        })\n        .concat([this.points[0].position]),\n      icons: [\n        {\n          icon: lineSymbol,\n          offset: '100%',\n        },\n      ],\n      strokeColor: '#ccc',\n      map,\n    });\n\n    /** ポリラインを表示 */\n    this.line.setMap(map);\n\n    /** アニメーションを実行 */\n    this.animateCircle(this.line);\n  }\n\n  /**\n   * シンボルをpolylineに沿ってアニメーションさせる\n   * */\n  private animateCircle(line: google.maps.Polyline): void {\n    let count = 0;\n    window.setInterval((): void => {\n      count = (count + 1) % 200;\n\n      const icons = line.get('icons');\n      icons[0].offset = count / 2 + '%';\n      line.set('icons', icons);\n    }, 40);\n  }\n}\n\nexport default Maps;\n","import * as React from 'react';\nimport Map from './maps';\n\nclass App extends React.Component<any, any> {\n  /** mapを表示する要素 */\n  readonly gmapsRef = React.createRef<HTMLDivElement>();\n\n  /** Mapのインスタンスを生成 */\n  readonly map = new Map();\n\n  componentDidMount(): void {\n    /** コンポーネントがマウントされたらMapを表示する */\n    this.map.initMap(this.gmapsRef.current);\n  }\n\n  render(): JSX.Element {\n    const Fragment = React.Fragment;\n    const style1 = { width: '100vw', height: '100vh' } as React.CSSProperties;\n    const style2 = {\n      position: 'absolute',\n      bottom: '32px',\n      zIndex: 100,\n      width: '100%',\n      textAlign: 'center',\n      fontWeight: 'bold',\n      fontSize: '24px',\n    } as React.CSSProperties;\n\n    return (\n      <Fragment>\n        <div ref={this.gmapsRef} style={style1}>\n          Google Maps\n        </div>\n        <div style={style2}>\n          <a\n            href=\"https://github.com/maechabin/react-googlemaps-sample\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\">\n            maechabin/react-googlemaps-sample - GitHub\n          </a>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}